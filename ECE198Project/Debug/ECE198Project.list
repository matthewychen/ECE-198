
ECE198Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002a94  08002a94  00003a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae8  08002ae8  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ae8  08002ae8  00003ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002af0  08002af0  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af0  08002af0  00003af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002af4  08002af4  00003af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002af8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000005c  08002b54  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08002b54  0000428c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000870c  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001589  00000000  00000000  0000c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0000dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059b  00000000  00000000  0000e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ac0  00000000  00000000  0000ea1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095d4  00000000  00000000  000254db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000921ee  00000000  00000000  0002eaaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0c9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002268  00000000  00000000  000c0ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c2f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002a7c 	.word	0x08002a7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08002a7c 	.word	0x08002a7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);

char uart_buffer[50]; // Buffer for UART messages
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0ba      	sub	sp, #232	@ 0xe8
 8000584:	af02      	add	r7, sp, #8
    HAL_Init();
 8000586:	f000 fabd 	bl	8000b04 <HAL_Init>
    SystemClock_Config();
 800058a:	f000 f955 	bl	8000838 <SystemClock_Config>
    MX_GPIO_Init();
 800058e:	f000 f925 	bl	80007dc <MX_GPIO_Init>
    MX_ADC1_Init();
 8000592:	f000 f8ad 	bl	80006f0 <MX_ADC1_Init>
    MX_USART2_UART_Init();
 8000596:	f000 f8f7 	bl	8000788 <MX_USART2_UART_Init>

    HAL_ADC_Start(&hadc1); // Start the ADC
 800059a:	484f      	ldr	r0, [pc, #316]	@ (80006d8 <main+0x158>)
 800059c:	f000 fb8c 	bl	8000cb8 <HAL_ADC_Start>
    uint32_t runningaverage[50] = {0}; // Initialize running average array
 80005a0:	463b      	mov	r3, r7
 80005a2:	22c8      	movs	r2, #200	@ 0xc8
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fde8 	bl	800217c <memset>
    uint32_t runningaveragesum = 0;    // Sum for running average
 80005ac:	2300      	movs	r3, #0
 80005ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    uint32_t trueaverage = 0;          // Final calculated average
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    // Fill the running average array initially
    for (uint32_t i = 0; i < 50; i++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80005be:	e01e      	b.n	80005fe <main+0x7e>
    {
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Wait for conversion
 80005c0:	f04f 31ff 	mov.w	r1, #4294967295
 80005c4:	4844      	ldr	r0, [pc, #272]	@ (80006d8 <main+0x158>)
 80005c6:	f000 fc2b 	bl	8000e20 <HAL_ADC_PollForConversion>
        uint32_t adc_value = HAL_ADC_GetValue(&hadc1);    // Get ADC value
 80005ca:	4843      	ldr	r0, [pc, #268]	@ (80006d8 <main+0x158>)
 80005cc:	f000 fcb3 	bl	8000f36 <HAL_ADC_GetValue>
 80005d0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
        runningaverage[i] = adc_value;                   // Populate array
 80005d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	33e0      	adds	r3, #224	@ 0xe0
 80005dc:	443b      	add	r3, r7
 80005de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80005e2:	f843 2ce0 	str.w	r2, [r3, #-224]
        runningaveragesum += adc_value;                  // Add to sum
 80005e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80005ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80005ee:	4413      	add	r3, r2
 80005f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    for (uint32_t i = 0; i < 50; i++)
 80005f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80005f8:	3301      	adds	r3, #1
 80005fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80005fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000602:	2b31      	cmp	r3, #49	@ 0x31
 8000604:	d9dc      	bls.n	80005c0 <main+0x40>
    }

    // Main loop
    while (1)
    {
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Wait for conversion
 8000606:	f04f 31ff 	mov.w	r1, #4294967295
 800060a:	4833      	ldr	r0, [pc, #204]	@ (80006d8 <main+0x158>)
 800060c:	f000 fc08 	bl	8000e20 <HAL_ADC_PollForConversion>
        uint32_t adc_value = HAL_ADC_GetValue(&hadc1);    // Get ADC value
 8000610:	4831      	ldr	r0, [pc, #196]	@ (80006d8 <main+0x158>)
 8000612:	f000 fc90 	bl	8000f36 <HAL_ADC_GetValue>
 8000616:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        // Update running average
        runningaveragesum -= runningaverage[0];           // Subtract oldest value
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        for (uint32_t i = 0; i < 49; i++)
 8000626:	2300      	movs	r3, #0
 8000628:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800062c:	e013      	b.n	8000656 <main+0xd6>
        {
            runningaverage[i] = runningaverage[i + 1];    // Shift array left
 800062e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000632:	3301      	adds	r3, #1
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	33e0      	adds	r3, #224	@ 0xe0
 8000638:	443b      	add	r3, r7
 800063a:	f853 2ce0 	ldr.w	r2, [r3, #-224]
 800063e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	33e0      	adds	r3, #224	@ 0xe0
 8000646:	443b      	add	r3, r7
 8000648:	f843 2ce0 	str.w	r2, [r3, #-224]
        for (uint32_t i = 0; i < 49; i++)
 800064c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000650:	3301      	adds	r3, #1
 8000652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800065a:	2b30      	cmp	r3, #48	@ 0x30
 800065c:	d9e7      	bls.n	800062e <main+0xae>
        }
        runningaverage[49] = adc_value;                  // Add new value
 800065e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000662:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
        runningaveragesum += adc_value;                  // Add new value to sum
 8000666:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800066a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800066e:	4413      	add	r3, r2
 8000670:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

        // Calculate the true average
        trueaverage = runningaveragesum / 50;
 8000674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000678:	4a18      	ldr	r2, [pc, #96]	@ (80006dc <main+0x15c>)
 800067a:	fba2 2303 	umull	r2, r3, r2, r3
 800067e:	091b      	lsrs	r3, r3, #4
 8000680:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

        // Set GPIO based on average
        if (trueaverage < 2900)
 8000684:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000688:	f640 3253 	movw	r2, #2899	@ 0xb53
 800068c:	4293      	cmp	r3, r2
 800068e:	d805      	bhi.n	800069c <main+0x11c>
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);//adc reading indicates moisture is needed
 8000690:	2200      	movs	r2, #0
 8000692:	2120      	movs	r1, #32
 8000694:	4812      	ldr	r0, [pc, #72]	@ (80006e0 <main+0x160>)
 8000696:	f001 f8e3 	bl	8001860 <HAL_GPIO_WritePin>
 800069a:	e004      	b.n	80006a6 <main+0x126>
        }
        else
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);//moisture no longer needed
 800069c:	2201      	movs	r2, #1
 800069e:	2120      	movs	r1, #32
 80006a0:	480f      	ldr	r0, [pc, #60]	@ (80006e0 <main+0x160>)
 80006a2:	f001 f8dd 	bl	8001860 <HAL_GPIO_WritePin>
        }

        // Send the ADC value and running average over UART
        snprintf(uart_buffer, sizeof(uart_buffer), "ADC: %lu, Avg: %lu\r\n", adc_value, trueaverage);
 80006a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80006b0:	4a0c      	ldr	r2, [pc, #48]	@ (80006e4 <main+0x164>)
 80006b2:	2132      	movs	r1, #50	@ 0x32
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <main+0x168>)
 80006b6:	f001 fd2d 	bl	8002114 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80006ba:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <main+0x168>)
 80006bc:	f7ff fd90 	bl	80001e0 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	4907      	ldr	r1, [pc, #28]	@ (80006e8 <main+0x168>)
 80006ca:	4808      	ldr	r0, [pc, #32]	@ (80006ec <main+0x16c>)
 80006cc:	f001 f966 	bl	800199c <HAL_UART_Transmit>

        HAL_Delay(100); // Delay to avoid flooding the serial monitor
 80006d0:	2064      	movs	r0, #100	@ 0x64
 80006d2:	f000 fa89 	bl	8000be8 <HAL_Delay>
    {
 80006d6:	e796      	b.n	8000606 <main+0x86>
 80006d8:	20000078 	.word	0x20000078
 80006dc:	51eb851f 	.word	0x51eb851f
 80006e0:	40020000 	.word	0x40020000
 80006e4:	08002a94 	.word	0x08002a94
 80006e8:	20000108 	.word	0x20000108
 80006ec:	200000c0 	.word	0x200000c0

080006f0 <MX_ADC1_Init>:
    }
}

static void MX_ADC1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]

    hadc1.Instance = ADC1;
 8000702:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <MX_ADC1_Init+0x8c>)
 8000704:	4a1e      	ldr	r2, [pc, #120]	@ (8000780 <MX_ADC1_Init+0x90>)
 8000706:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <MX_ADC1_Init+0x8c>)
 800070a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800070e:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_ADC1_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <MX_ADC1_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = DISABLE; // Single-channel mode
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_ADC1_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE; // Enable continuous mode
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <MX_ADC1_Init+0x8c>)
 8000724:	2201      	movs	r2, #1
 8000726:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_ADC1_Init+0x8c>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_ADC1_Init+0x8c>)
 8000732:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <MX_ADC1_Init+0x94>)
 8000734:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_ADC1_Init+0x8c>)
 8000738:	2200      	movs	r2, #0
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_ADC1_Init+0x8c>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000744:	480d      	ldr	r0, [pc, #52]	@ (800077c <MX_ADC1_Init+0x8c>)
 8000746:	f000 fa73 	bl	8000c30 <HAL_ADC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x64>
    {
        Error_Handler();
 8000750:	f000 f879 	bl	8000846 <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_0;
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800075c:	2301      	movs	r3, #1
 800075e:	60bb      	str	r3, [r7, #8]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_ADC1_Init+0x8c>)
 8000766:	f000 fbf3 	bl	8000f50 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x84>
    {
        Error_Handler();
 8000770:	f000 f869 	bl	8000846 <Error_Handler>
    }
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000078 	.word	0x20000078
 8000780:	40012000 	.word	0x40012000
 8000784:	0f000001 	.word	0x0f000001

08000788 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600; // Standard baud rate for UART
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000798:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f001 f89c 	bl	80018fc <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 80007ca:	f000 f83c 	bl	8000846 <Error_Handler>
    }
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000c0 	.word	0x200000c0
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

    // Enable GPIO clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_GPIO_Init+0x54>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000830 <MX_GPIO_Init+0x54>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_GPIO_Init+0x54>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

    // Configure GPIO Pin 5 as output
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800080c:	2320      	movs	r3, #32
 800080e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
 8000810:	2301      	movs	r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;        // No pull-up, no pull-down
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low-speed output
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_GPIO_Init+0x58>)
 8000822:	f000 fe99 	bl	8001558 <HAL_GPIO_Init>
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000

08000838 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
    // Auto-generated by STM32CubeMX for your specific board
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <Error_Handler>:

void Error_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
    while (1)
 800084a:	bf00      	nop
 800084c:	e7fd      	b.n	800084a <Error_Handler+0x4>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <HAL_MspInit+0x4c>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000864:	6453      	str	r3, [r2, #68]	@ 0x44
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	@ 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800088e:	2007      	movs	r0, #7
 8000890:	f000 fe2e 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  /* USER CODE END MspInit 1 */
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800

080008a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a17      	ldr	r2, [pc, #92]	@ (800091c <HAL_ADC_MspInit+0x7c>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d127      	bne.n	8000912 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	4a15      	ldr	r2, [pc, #84]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fa:	2301      	movs	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 800090e:	f000 fe23 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */
  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	@ 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40012000 	.word	0x40012000
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	@ (80009ac <HAL_UART_MspInit+0x84>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d12b      	bne.n	80009a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */
  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000982:	230c      	movs	r3, #12
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000992:	2307      	movs	r3, #7
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 800099e:	f000 fddb 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */
  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	@ 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <NMI_Handler+0x4>

080009c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <UsageFault_Handler+0x4>

080009e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0e:	f000 f8cb 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;               /* Symbol defined in the linker script */
    extern uint8_t _estack;            /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size;   /* Symbol defined in the linker script */

    /* Corrected: Subtract the value of _Min_Stack_Size, not its address */
    const uintptr_t estack_addr = (uintptr_t)&_estack;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <_sbrk+0x64>)
 8000a22:	617b      	str	r3, [r7, #20]
    const uintptr_t stack_limit = estack_addr - (uintptr_t)_Min_Stack_Size;
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <_sbrk+0x68>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	613b      	str	r3, [r7, #16]
    const uint8_t *max_heap = (const uint8_t *)stack_limit;
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	60fb      	str	r3, [r7, #12]
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (__sbrk_heap_end == NULL)
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <_sbrk+0x6c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <_sbrk+0x28>
    {
        __sbrk_heap_end = &_end;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <_sbrk+0x6c>)
 8000a3c:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <_sbrk+0x70>)
 8000a3e:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if ((__sbrk_heap_end + incr) > max_heap)
 8000a40:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <_sbrk+0x6c>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d207      	bcs.n	8000a5e <_sbrk+0x46>
    {
        errno = ENOMEM;
 8000a4e:	f001 fb9d 	bl	800218c <__errno>
 8000a52:	4603      	mov	r3, r0
 8000a54:	220c      	movs	r2, #12
 8000a56:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	e009      	b.n	8000a72 <_sbrk+0x5a>
    }

    prev_heap_end = __sbrk_heap_end;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <_sbrk+0x6c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	60bb      	str	r3, [r7, #8]
    __sbrk_heap_end += incr;
 8000a64:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <_sbrk+0x6c>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a05      	ldr	r2, [pc, #20]	@ (8000a84 <_sbrk+0x6c>)
 8000a6e:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000a70:	68bb      	ldr	r3, [r7, #8]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20018000 	.word	0x20018000
 8000a80:	00000400 	.word	0x00000400
 8000a84:	2000013c 	.word	0x2000013c
 8000a88:	20000290 	.word	0x20000290

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <SystemInit+0x20>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a96:	4a05      	ldr	r2, [pc, #20]	@ (8000aac <SystemInit+0x20>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ab4:	f7ff ffea 	bl	8000a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	@ (8000af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8000afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f001 fb5b 	bl	8002198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff fd4d 	bl	8000580 <main>
  bx  lr    
 8000ae6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000af4:	08002af8 	.word	0x08002af8
  ldr r2, =_sbss
 8000af8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000afc:	2000028c 	.word	0x2000028c

08000b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>
	...

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b08:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <HAL_Init+0x40>)
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b14:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <HAL_Init+0x40>)
 8000b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_Init+0x40>)
 8000b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 fcdf 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fe8a 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023c00 	.word	0x40023c00

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fce9 	bl	800153e <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 fcbf 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	@ (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000140 	.word	0x20000140

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000140 	.word	0x20000140

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e033      	b.n	8000cae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d109      	bne.n	8000c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fe26 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d118      	bne.n	8000ca0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c76:	f023 0302 	bic.w	r3, r3, #2
 8000c7a:	f043 0202 	orr.w	r2, r3, #2
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 fa86 	bl	8001194 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	f023 0303 	bic.w	r3, r3, #3
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c9e:	e001      	b.n	8000ca4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ADC_Start+0x1a>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e097      	b.n	8000e02 <HAL_ADC_Start+0x14a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d018      	beq.n	8000d1a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0201 	orr.w	r2, r2, #1
 8000cf6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cf8:	4b45      	ldr	r3, [pc, #276]	@ (8000e10 <HAL_ADC_Start+0x158>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a45      	ldr	r2, [pc, #276]	@ (8000e14 <HAL_ADC_Start+0x15c>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	0c9a      	lsrs	r2, r3, #18
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000d0c:	e002      	b.n	8000d14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f9      	bne.n	8000d0e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d15f      	bne.n	8000de8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d66:	d106      	bne.n	8000d76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6c:	f023 0206 	bic.w	r2, r3, #6
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d74:	e002      	b.n	8000d7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <HAL_ADC_Start+0x160>)
 8000d86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000d90:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10f      	bne.n	8000dbe <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d129      	bne.n	8000e00 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	e020      	b.n	8000e00 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a16      	ldr	r2, [pc, #88]	@ (8000e1c <HAL_ADC_Start+0x164>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d11b      	bne.n	8000e00 <HAL_ADC_Start+0x148>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d114      	bne.n	8000e00 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	e00b      	b.n	8000e00 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f043 0210 	orr.w	r2, r3, #16
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df8:	f043 0201 	orr.w	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000000 	.word	0x20000000
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	40012300 	.word	0x40012300
 8000e1c:	40012000 	.word	0x40012000

08000e20 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e3c:	d113      	bne.n	8000e66 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e4c:	d10b      	bne.n	8000e66 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f043 0220 	orr.w	r2, r3, #32
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e063      	b.n	8000f2e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e66:	f7ff feb3 	bl	8000bd0 <HAL_GetTick>
 8000e6a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e6c:	e021      	b.n	8000eb2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d01d      	beq.n	8000eb2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d007      	beq.n	8000e8c <HAL_ADC_PollForConversion+0x6c>
 8000e7c:	f7ff fea8 	bl	8000bd0 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d212      	bcs.n	8000eb2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d00b      	beq.n	8000eb2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f043 0204 	orr.w	r2, r3, #4
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e03d      	b.n	8000f2e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d1d6      	bne.n	8000e6e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f06f 0212 	mvn.w	r2, #18
 8000ec8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d123      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d11f      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d111      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d105      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_ADC_ConfigChannel+0x1c>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e105      	b.n	8001178 <HAL_ADC_ConfigChannel+0x228>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	d925      	bls.n	8000fc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68d9      	ldr	r1, [r3, #12]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	3b1e      	subs	r3, #30
 8000f92:	2207      	movs	r2, #7
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43da      	mvns	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68d9      	ldr	r1, [r3, #12]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4403      	add	r3, r0
 8000fba:	3b1e      	subs	r3, #30
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	e022      	b.n	800100e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6919      	ldr	r1, [r3, #16]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	2207      	movs	r2, #7
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	400a      	ands	r2, r1
 8000fea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6919      	ldr	r1, [r3, #16]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4403      	add	r3, r0
 8001004:	409a      	lsls	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b06      	cmp	r3, #6
 8001014:	d824      	bhi.n	8001060 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	3b05      	subs	r3, #5
 8001028:	221f      	movs	r2, #31
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	400a      	ands	r2, r1
 8001036:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	3b05      	subs	r3, #5
 8001052:	fa00 f203 	lsl.w	r2, r0, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	635a      	str	r2, [r3, #52]	@ 0x34
 800105e:	e04c      	b.n	80010fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	d824      	bhi.n	80010b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3b23      	subs	r3, #35	@ 0x23
 800107a:	221f      	movs	r2, #31
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43da      	mvns	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	400a      	ands	r2, r1
 8001088:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	3b23      	subs	r3, #35	@ 0x23
 80010a4:	fa00 f203 	lsl.w	r2, r0, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80010b0:	e023      	b.n	80010fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	3b41      	subs	r3, #65	@ 0x41
 80010c4:	221f      	movs	r2, #31
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	400a      	ands	r2, r1
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3b41      	subs	r3, #65	@ 0x41
 80010ee:	fa00 f203 	lsl.w	r2, r0, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010fa:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <HAL_ADC_ConfigChannel+0x234>)
 80010fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <HAL_ADC_ConfigChannel+0x238>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d109      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1cc>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b12      	cmp	r3, #18
 800110e:	d105      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a19      	ldr	r2, [pc, #100]	@ (8001188 <HAL_ADC_ConfigChannel+0x238>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d123      	bne.n	800116e <HAL_ADC_ConfigChannel+0x21e>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b10      	cmp	r3, #16
 800112c:	d003      	beq.n	8001136 <HAL_ADC_ConfigChannel+0x1e6>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b11      	cmp	r3, #17
 8001134:	d11b      	bne.n	800116e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b10      	cmp	r3, #16
 8001148:	d111      	bne.n	800116e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <HAL_ADC_ConfigChannel+0x23c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a10      	ldr	r2, [pc, #64]	@ (8001190 <HAL_ADC_ConfigChannel+0x240>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	0c9a      	lsrs	r2, r3, #18
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001160:	e002      	b.n	8001168 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3b01      	subs	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40012300 	.word	0x40012300
 8001188:	40012000 	.word	0x40012000
 800118c:	20000000 	.word	0x20000000
 8001190:	431bde83 	.word	0x431bde83

08001194 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800119c:	4b79      	ldr	r3, [pc, #484]	@ (8001384 <ADC_Init+0x1f0>)
 800119e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	431a      	orrs	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6859      	ldr	r1, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	021a      	lsls	r2, r3, #8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80011ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6859      	ldr	r1, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800120e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6899      	ldr	r1, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001226:	4a58      	ldr	r2, [pc, #352]	@ (8001388 <ADC_Init+0x1f4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d022      	beq.n	8001272 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800123a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6899      	ldr	r1, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800125c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6899      	ldr	r1, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	e00f      	b.n	8001292 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001290:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0202 	bic.w	r2, r2, #2
 80012a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6899      	ldr	r1, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e1b      	ldrb	r3, [r3, #24]
 80012ac:	005a      	lsls	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d01b      	beq.n	80012f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80012de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6859      	ldr	r1, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ea:	3b01      	subs	r3, #1
 80012ec:	035a      	lsls	r2, r3, #13
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	e007      	b.n	8001308 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001306:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001316:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	3b01      	subs	r3, #1
 8001324:	051a      	lsls	r2, r3, #20
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800133c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6899      	ldr	r1, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800134a:	025a      	lsls	r2, r3, #9
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6899      	ldr	r1, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	029a      	lsls	r2, r3, #10
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	609a      	str	r2, [r3, #8]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40012300 	.word	0x40012300
 8001388:	0f000001 	.word	0x0f000001

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	@ (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	@ (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff47 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff5c 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffb0 	bl	80014ac <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e159      	b.n	8001828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 8148 	bne.w	8001822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d005      	beq.n	80015aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d130      	bne.n	800160c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 0201 	and.w	r2, r3, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b03      	cmp	r3, #3
 8001616:	d017      	beq.n	8001648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d123      	bne.n	800169c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80a2 	beq.w	8001822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b57      	ldr	r3, [pc, #348]	@ (8001840 <HAL_GPIO_Init+0x2e8>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	4a56      	ldr	r2, [pc, #344]	@ (8001840 <HAL_GPIO_Init+0x2e8>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ee:	4b54      	ldr	r3, [pc, #336]	@ (8001840 <HAL_GPIO_Init+0x2e8>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fa:	4a52      	ldr	r2, [pc, #328]	@ (8001844 <HAL_GPIO_Init+0x2ec>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a49      	ldr	r2, [pc, #292]	@ (8001848 <HAL_GPIO_Init+0x2f0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_GPIO_Init+0x202>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a48      	ldr	r2, [pc, #288]	@ (800184c <HAL_GPIO_Init+0x2f4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0x1fe>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a47      	ldr	r2, [pc, #284]	@ (8001850 <HAL_GPIO_Init+0x2f8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00d      	beq.n	8001752 <HAL_GPIO_Init+0x1fa>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a46      	ldr	r2, [pc, #280]	@ (8001854 <HAL_GPIO_Init+0x2fc>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0x1f6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a45      	ldr	r2, [pc, #276]	@ (8001858 <HAL_GPIO_Init+0x300>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_GPIO_Init+0x1f2>
 8001746:	2304      	movs	r3, #4
 8001748:	e008      	b.n	800175c <HAL_GPIO_Init+0x204>
 800174a:	2307      	movs	r3, #7
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x204>
 800174e:	2303      	movs	r3, #3
 8001750:	e004      	b.n	800175c <HAL_GPIO_Init+0x204>
 8001752:	2302      	movs	r3, #2
 8001754:	e002      	b.n	800175c <HAL_GPIO_Init+0x204>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x204>
 800175a:	2300      	movs	r3, #0
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f002 0203 	and.w	r2, r2, #3
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	4093      	lsls	r3, r2
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176c:	4935      	ldr	r1, [pc, #212]	@ (8001844 <HAL_GPIO_Init+0x2ec>)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177a:	4b38      	ldr	r3, [pc, #224]	@ (800185c <HAL_GPIO_Init+0x304>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179e:	4a2f      	ldr	r2, [pc, #188]	@ (800185c <HAL_GPIO_Init+0x304>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a4:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <HAL_GPIO_Init+0x304>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c8:	4a24      	ldr	r2, [pc, #144]	@ (800185c <HAL_GPIO_Init+0x304>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ce:	4b23      	ldr	r3, [pc, #140]	@ (800185c <HAL_GPIO_Init+0x304>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f2:	4a1a      	ldr	r2, [pc, #104]	@ (800185c <HAL_GPIO_Init+0x304>)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f8:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_GPIO_Init+0x304>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800181c:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <HAL_GPIO_Init+0x304>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b0f      	cmp	r3, #15
 800182c:	f67f aea2 	bls.w	8001574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3724      	adds	r7, #36	@ 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40013800 	.word	0x40013800
 8001848:	40020000 	.word	0x40020000
 800184c:	40020400 	.word	0x40020400
 8001850:	40020800 	.word	0x40020800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	40021000 	.word	0x40021000
 800185c:	40013c00 	.word	0x40013c00

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000000 	.word	0x20000000

080018ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018b0:	f7ff fff0 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018b4:	4602      	mov	r2, r0
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	0a9b      	lsrs	r3, r3, #10
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	4903      	ldr	r1, [pc, #12]	@ (80018d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c2:	5ccb      	ldrb	r3, [r1, r3]
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	08002aac 	.word	0x08002aac

080018d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018d8:	f7ff ffdc 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	0b5b      	lsrs	r3, r3, #13
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4903      	ldr	r1, [pc, #12]	@ (80018f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ea:	5ccb      	ldrb	r3, [r1, r3]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	08002aac 	.word	0x08002aac

080018fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e042      	b.n	8001994 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d106      	bne.n	8001928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff f800 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2224      	movs	r2, #36	@ 0x24
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800193e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f973 	bl	8001c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	4613      	mov	r3, r2
 80019aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	d175      	bne.n	8001aa8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_UART_Transmit+0x2c>
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e06e      	b.n	8001aaa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2221      	movs	r2, #33	@ 0x21
 80019d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019da:	f7ff f8f9 	bl	8000bd0 <HAL_GetTick>
 80019de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	88fa      	ldrh	r2, [r7, #6]
 80019e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	88fa      	ldrh	r2, [r7, #6]
 80019ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019f4:	d108      	bne.n	8001a08 <HAL_UART_Transmit+0x6c>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d104      	bne.n	8001a08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	e003      	b.n	8001a10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a10:	e02e      	b.n	8001a70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2180      	movs	r1, #128	@ 0x80
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 f848 	bl	8001ab2 <UART_WaitOnFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e03a      	b.n	8001aaa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10b      	bne.n	8001a52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	e007      	b.n	8001a62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1cb      	bne.n	8001a12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2200      	movs	r2, #0
 8001a82:	2140      	movs	r1, #64	@ 0x40
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f814 	bl	8001ab2 <UART_WaitOnFlagUntilTimeout>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e006      	b.n	8001aaa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ac2:	e03b      	b.n	8001b3c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aca:	d037      	beq.n	8001b3c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001acc:	f7ff f880 	bl	8000bd0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	6a3a      	ldr	r2, [r7, #32]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d302      	bcc.n	8001ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e03a      	b.n	8001b5c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d023      	beq.n	8001b3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b80      	cmp	r3, #128	@ 0x80
 8001af8:	d020      	beq.n	8001b3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b40      	cmp	r3, #64	@ 0x40
 8001afe:	d01d      	beq.n	8001b3c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d116      	bne.n	8001b3c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f81d 	bl	8001b64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e00f      	b.n	8001b5c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4013      	ands	r3, r2
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d0b4      	beq.n	8001ac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b095      	sub	sp, #84	@ 0x54
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	330c      	adds	r3, #12
 8001b72:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b76:	e853 3f00 	ldrex	r3, [r3]
 8001b7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	330c      	adds	r3, #12
 8001b8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001b92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b94:	e841 2300 	strex	r3, r2, [r1]
 8001b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e5      	bne.n	8001b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3314      	adds	r3, #20
 8001ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	e853 3f00 	ldrex	r3, [r3]
 8001bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3314      	adds	r3, #20
 8001bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bc8:	e841 2300 	strex	r3, r2, [r1]
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e5      	bne.n	8001ba0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d119      	bne.n	8001c10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	330c      	adds	r3, #12
 8001be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	e853 3f00 	ldrex	r3, [r3]
 8001bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f023 0310 	bic.w	r3, r3, #16
 8001bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bfc:	61ba      	str	r2, [r7, #24]
 8001bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c00:	6979      	ldr	r1, [r7, #20]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	e841 2300 	strex	r3, r2, [r1]
 8001c08:	613b      	str	r3, [r7, #16]
   return(result);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e5      	bne.n	8001bdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001c1e:	bf00      	nop
 8001c20:	3754      	adds	r7, #84	@ 0x54
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c30:	b0c0      	sub	sp, #256	@ 0x100
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c48:	68d9      	ldr	r1, [r3, #12]
 8001c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	ea40 0301 	orr.w	r3, r0, r1
 8001c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001c84:	f021 010c 	bic.w	r1, r1, #12
 8001c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c92:	430b      	orrs	r3, r1
 8001c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ca6:	6999      	ldr	r1, [r3, #24]
 8001ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	ea40 0301 	orr.w	r3, r0, r1
 8001cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b8f      	ldr	r3, [pc, #572]	@ (8001ef8 <UART_SetConfig+0x2cc>)
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d005      	beq.n	8001ccc <UART_SetConfig+0xa0>
 8001cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8001efc <UART_SetConfig+0x2d0>)
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d104      	bne.n	8001cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ccc:	f7ff fe02 	bl	80018d4 <HAL_RCC_GetPCLK2Freq>
 8001cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001cd4:	e003      	b.n	8001cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cd6:	f7ff fde9 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8001cda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ce8:	f040 810c 	bne.w	8001f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001cfe:	4622      	mov	r2, r4
 8001d00:	462b      	mov	r3, r5
 8001d02:	1891      	adds	r1, r2, r2
 8001d04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d06:	415b      	adcs	r3, r3
 8001d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d0e:	4621      	mov	r1, r4
 8001d10:	eb12 0801 	adds.w	r8, r2, r1
 8001d14:	4629      	mov	r1, r5
 8001d16:	eb43 0901 	adc.w	r9, r3, r1
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d2e:	4690      	mov	r8, r2
 8001d30:	4699      	mov	r9, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	eb18 0303 	adds.w	r3, r8, r3
 8001d38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d3c:	462b      	mov	r3, r5
 8001d3e:	eb49 0303 	adc.w	r3, r9, r3
 8001d42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	18db      	adds	r3, r3, r3
 8001d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d60:	4613      	mov	r3, r2
 8001d62:	eb42 0303 	adc.w	r3, r2, r3
 8001d66:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001d70:	f7fe fa8e 	bl	8000290 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4b61      	ldr	r3, [pc, #388]	@ (8001f00 <UART_SetConfig+0x2d4>)
 8001d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	011c      	lsls	r4, r3, #4
 8001d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d86:	2200      	movs	r2, #0
 8001d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001d94:	4642      	mov	r2, r8
 8001d96:	464b      	mov	r3, r9
 8001d98:	1891      	adds	r1, r2, r2
 8001d9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001d9c:	415b      	adcs	r3, r3
 8001d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001da4:	4641      	mov	r1, r8
 8001da6:	eb12 0a01 	adds.w	sl, r2, r1
 8001daa:	4649      	mov	r1, r9
 8001dac:	eb43 0b01 	adc.w	fp, r3, r1
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dc4:	4692      	mov	sl, r2
 8001dc6:	469b      	mov	fp, r3
 8001dc8:	4643      	mov	r3, r8
 8001dca:	eb1a 0303 	adds.w	r3, sl, r3
 8001dce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8001dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001de8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001df0:	460b      	mov	r3, r1
 8001df2:	18db      	adds	r3, r3, r3
 8001df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001df6:	4613      	mov	r3, r2
 8001df8:	eb42 0303 	adc.w	r3, r2, r3
 8001dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001e06:	f7fe fa43 	bl	8000290 <__aeabi_uldivmod>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4b3b      	ldr	r3, [pc, #236]	@ (8001f00 <UART_SetConfig+0x2d4>)
 8001e12:	fba3 2301 	umull	r2, r3, r3, r1
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2264      	movs	r2, #100	@ 0x64
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	1acb      	subs	r3, r1, r3
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001e26:	4b36      	ldr	r3, [pc, #216]	@ (8001f00 <UART_SetConfig+0x2d4>)
 8001e28:	fba3 2302 	umull	r2, r3, r3, r2
 8001e2c:	095b      	lsrs	r3, r3, #5
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001e34:	441c      	add	r4, r3
 8001e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001e48:	4642      	mov	r2, r8
 8001e4a:	464b      	mov	r3, r9
 8001e4c:	1891      	adds	r1, r2, r2
 8001e4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e50:	415b      	adcs	r3, r3
 8001e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e58:	4641      	mov	r1, r8
 8001e5a:	1851      	adds	r1, r2, r1
 8001e5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8001e5e:	4649      	mov	r1, r9
 8001e60:	414b      	adcs	r3, r1
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001e70:	4659      	mov	r1, fp
 8001e72:	00cb      	lsls	r3, r1, #3
 8001e74:	4651      	mov	r1, sl
 8001e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e7a:	4651      	mov	r1, sl
 8001e7c:	00ca      	lsls	r2, r1, #3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	4642      	mov	r2, r8
 8001e86:	189b      	adds	r3, r3, r2
 8001e88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e8c:	464b      	mov	r3, r9
 8001e8e:	460a      	mov	r2, r1
 8001e90:	eb42 0303 	adc.w	r3, r2, r3
 8001e94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001eac:	460b      	mov	r3, r1
 8001eae:	18db      	adds	r3, r3, r3
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	eb42 0303 	adc.w	r3, r2, r3
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001ec2:	f7fe f9e5 	bl	8000290 <__aeabi_uldivmod>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <UART_SetConfig+0x2d4>)
 8001ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	2164      	movs	r1, #100	@ 0x64
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	3332      	adds	r3, #50	@ 0x32
 8001ede:	4a08      	ldr	r2, [pc, #32]	@ (8001f00 <UART_SetConfig+0x2d4>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	f003 0207 	and.w	r2, r3, #7
 8001eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4422      	add	r2, r4
 8001ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ef4:	e106      	b.n	8002104 <UART_SetConfig+0x4d8>
 8001ef6:	bf00      	nop
 8001ef8:	40011000 	.word	0x40011000
 8001efc:	40011400 	.word	0x40011400
 8001f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001f16:	4642      	mov	r2, r8
 8001f18:	464b      	mov	r3, r9
 8001f1a:	1891      	adds	r1, r2, r2
 8001f1c:	6239      	str	r1, [r7, #32]
 8001f1e:	415b      	adcs	r3, r3
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f26:	4641      	mov	r1, r8
 8001f28:	1854      	adds	r4, r2, r1
 8001f2a:	4649      	mov	r1, r9
 8001f2c:	eb43 0501 	adc.w	r5, r3, r1
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	00eb      	lsls	r3, r5, #3
 8001f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f3e:	00e2      	lsls	r2, r4, #3
 8001f40:	4614      	mov	r4, r2
 8001f42:	461d      	mov	r5, r3
 8001f44:	4643      	mov	r3, r8
 8001f46:	18e3      	adds	r3, r4, r3
 8001f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f4c:	464b      	mov	r3, r9
 8001f4e:	eb45 0303 	adc.w	r3, r5, r3
 8001f52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f72:	4629      	mov	r1, r5
 8001f74:	008b      	lsls	r3, r1, #2
 8001f76:	4621      	mov	r1, r4
 8001f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	008a      	lsls	r2, r1, #2
 8001f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001f84:	f7fe f984 	bl	8000290 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4b60      	ldr	r3, [pc, #384]	@ (8002110 <UART_SetConfig+0x4e4>)
 8001f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	011c      	lsls	r4, r3, #4
 8001f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001fa8:	4642      	mov	r2, r8
 8001faa:	464b      	mov	r3, r9
 8001fac:	1891      	adds	r1, r2, r2
 8001fae:	61b9      	str	r1, [r7, #24]
 8001fb0:	415b      	adcs	r3, r3
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fb8:	4641      	mov	r1, r8
 8001fba:	1851      	adds	r1, r2, r1
 8001fbc:	6139      	str	r1, [r7, #16]
 8001fbe:	4649      	mov	r1, r9
 8001fc0:	414b      	adcs	r3, r1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fd0:	4659      	mov	r1, fp
 8001fd2:	00cb      	lsls	r3, r1, #3
 8001fd4:	4651      	mov	r1, sl
 8001fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fda:	4651      	mov	r1, sl
 8001fdc:	00ca      	lsls	r2, r1, #3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4642      	mov	r2, r8
 8001fe6:	189b      	adds	r3, r3, r2
 8001fe8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fec:	464b      	mov	r3, r9
 8001fee:	460a      	mov	r2, r1
 8001ff0:	eb42 0303 	adc.w	r3, r2, r3
 8001ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002002:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002010:	4649      	mov	r1, r9
 8002012:	008b      	lsls	r3, r1, #2
 8002014:	4641      	mov	r1, r8
 8002016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800201a:	4641      	mov	r1, r8
 800201c:	008a      	lsls	r2, r1, #2
 800201e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002022:	f7fe f935 	bl	8000290 <__aeabi_uldivmod>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4611      	mov	r1, r2
 800202c:	4b38      	ldr	r3, [pc, #224]	@ (8002110 <UART_SetConfig+0x4e4>)
 800202e:	fba3 2301 	umull	r2, r3, r3, r1
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2264      	movs	r2, #100	@ 0x64
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	1acb      	subs	r3, r1, r3
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	3332      	adds	r3, #50	@ 0x32
 8002040:	4a33      	ldr	r2, [pc, #204]	@ (8002110 <UART_SetConfig+0x4e4>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800204c:	441c      	add	r4, r3
 800204e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002052:	2200      	movs	r2, #0
 8002054:	673b      	str	r3, [r7, #112]	@ 0x70
 8002056:	677a      	str	r2, [r7, #116]	@ 0x74
 8002058:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800205c:	4642      	mov	r2, r8
 800205e:	464b      	mov	r3, r9
 8002060:	1891      	adds	r1, r2, r2
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	415b      	adcs	r3, r3
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800206c:	4641      	mov	r1, r8
 800206e:	1851      	adds	r1, r2, r1
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	4649      	mov	r1, r9
 8002074:	414b      	adcs	r3, r1
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002084:	4659      	mov	r1, fp
 8002086:	00cb      	lsls	r3, r1, #3
 8002088:	4651      	mov	r1, sl
 800208a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800208e:	4651      	mov	r1, sl
 8002090:	00ca      	lsls	r2, r1, #3
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4603      	mov	r3, r0
 8002098:	4642      	mov	r2, r8
 800209a:	189b      	adds	r3, r3, r2
 800209c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800209e:	464b      	mov	r3, r9
 80020a0:	460a      	mov	r2, r1
 80020a2:	eb42 0303 	adc.w	r3, r2, r3
 80020a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80020b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80020c0:	4649      	mov	r1, r9
 80020c2:	008b      	lsls	r3, r1, #2
 80020c4:	4641      	mov	r1, r8
 80020c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020ca:	4641      	mov	r1, r8
 80020cc:	008a      	lsls	r2, r1, #2
 80020ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80020d2:	f7fe f8dd 	bl	8000290 <__aeabi_uldivmod>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <UART_SetConfig+0x4e4>)
 80020dc:	fba3 1302 	umull	r1, r3, r3, r2
 80020e0:	095b      	lsrs	r3, r3, #5
 80020e2:	2164      	movs	r1, #100	@ 0x64
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	3332      	adds	r3, #50	@ 0x32
 80020ee:	4a08      	ldr	r2, [pc, #32]	@ (8002110 <UART_SetConfig+0x4e4>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	f003 020f 	and.w	r2, r3, #15
 80020fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4422      	add	r2, r4
 8002102:	609a      	str	r2, [r3, #8]
}
 8002104:	bf00      	nop
 8002106:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800210a:	46bd      	mov	sp, r7
 800210c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002110:	51eb851f 	.word	0x51eb851f

08002114 <sniprintf>:
 8002114:	b40c      	push	{r2, r3}
 8002116:	b530      	push	{r4, r5, lr}
 8002118:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <sniprintf+0x64>)
 800211a:	1e0c      	subs	r4, r1, #0
 800211c:	681d      	ldr	r5, [r3, #0]
 800211e:	b09d      	sub	sp, #116	@ 0x74
 8002120:	da08      	bge.n	8002134 <sniprintf+0x20>
 8002122:	238b      	movs	r3, #139	@ 0x8b
 8002124:	602b      	str	r3, [r5, #0]
 8002126:	f04f 30ff 	mov.w	r0, #4294967295
 800212a:	b01d      	add	sp, #116	@ 0x74
 800212c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002130:	b002      	add	sp, #8
 8002132:	4770      	bx	lr
 8002134:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002138:	f8ad 3014 	strh.w	r3, [sp, #20]
 800213c:	bf14      	ite	ne
 800213e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002142:	4623      	moveq	r3, r4
 8002144:	9304      	str	r3, [sp, #16]
 8002146:	9307      	str	r3, [sp, #28]
 8002148:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800214c:	9002      	str	r0, [sp, #8]
 800214e:	9006      	str	r0, [sp, #24]
 8002150:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002154:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002156:	ab21      	add	r3, sp, #132	@ 0x84
 8002158:	a902      	add	r1, sp, #8
 800215a:	4628      	mov	r0, r5
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	f000 f995 	bl	800248c <_svfiprintf_r>
 8002162:	1c43      	adds	r3, r0, #1
 8002164:	bfbc      	itt	lt
 8002166:	238b      	movlt	r3, #139	@ 0x8b
 8002168:	602b      	strlt	r3, [r5, #0]
 800216a:	2c00      	cmp	r4, #0
 800216c:	d0dd      	beq.n	800212a <sniprintf+0x16>
 800216e:	9b02      	ldr	r3, [sp, #8]
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e7d9      	b.n	800212a <sniprintf+0x16>
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c

0800217c <memset>:
 800217c:	4402      	add	r2, r0
 800217e:	4603      	mov	r3, r0
 8002180:	4293      	cmp	r3, r2
 8002182:	d100      	bne.n	8002186 <memset+0xa>
 8002184:	4770      	bx	lr
 8002186:	f803 1b01 	strb.w	r1, [r3], #1
 800218a:	e7f9      	b.n	8002180 <memset+0x4>

0800218c <__errno>:
 800218c:	4b01      	ldr	r3, [pc, #4]	@ (8002194 <__errno+0x8>)
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	2000000c 	.word	0x2000000c

08002198 <__libc_init_array>:
 8002198:	b570      	push	{r4, r5, r6, lr}
 800219a:	4d0d      	ldr	r5, [pc, #52]	@ (80021d0 <__libc_init_array+0x38>)
 800219c:	4c0d      	ldr	r4, [pc, #52]	@ (80021d4 <__libc_init_array+0x3c>)
 800219e:	1b64      	subs	r4, r4, r5
 80021a0:	10a4      	asrs	r4, r4, #2
 80021a2:	2600      	movs	r6, #0
 80021a4:	42a6      	cmp	r6, r4
 80021a6:	d109      	bne.n	80021bc <__libc_init_array+0x24>
 80021a8:	4d0b      	ldr	r5, [pc, #44]	@ (80021d8 <__libc_init_array+0x40>)
 80021aa:	4c0c      	ldr	r4, [pc, #48]	@ (80021dc <__libc_init_array+0x44>)
 80021ac:	f000 fc66 	bl	8002a7c <_init>
 80021b0:	1b64      	subs	r4, r4, r5
 80021b2:	10a4      	asrs	r4, r4, #2
 80021b4:	2600      	movs	r6, #0
 80021b6:	42a6      	cmp	r6, r4
 80021b8:	d105      	bne.n	80021c6 <__libc_init_array+0x2e>
 80021ba:	bd70      	pop	{r4, r5, r6, pc}
 80021bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c0:	4798      	blx	r3
 80021c2:	3601      	adds	r6, #1
 80021c4:	e7ee      	b.n	80021a4 <__libc_init_array+0xc>
 80021c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ca:	4798      	blx	r3
 80021cc:	3601      	adds	r6, #1
 80021ce:	e7f2      	b.n	80021b6 <__libc_init_array+0x1e>
 80021d0:	08002af0 	.word	0x08002af0
 80021d4:	08002af0 	.word	0x08002af0
 80021d8:	08002af0 	.word	0x08002af0
 80021dc:	08002af4 	.word	0x08002af4

080021e0 <__retarget_lock_acquire_recursive>:
 80021e0:	4770      	bx	lr

080021e2 <__retarget_lock_release_recursive>:
 80021e2:	4770      	bx	lr

080021e4 <_free_r>:
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	4605      	mov	r5, r0
 80021e8:	2900      	cmp	r1, #0
 80021ea:	d041      	beq.n	8002270 <_free_r+0x8c>
 80021ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021f0:	1f0c      	subs	r4, r1, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bfb8      	it	lt
 80021f6:	18e4      	addlt	r4, r4, r3
 80021f8:	f000 f8e0 	bl	80023bc <__malloc_lock>
 80021fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002274 <_free_r+0x90>)
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	b933      	cbnz	r3, 8002210 <_free_r+0x2c>
 8002202:	6063      	str	r3, [r4, #4]
 8002204:	6014      	str	r4, [r2, #0]
 8002206:	4628      	mov	r0, r5
 8002208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800220c:	f000 b8dc 	b.w	80023c8 <__malloc_unlock>
 8002210:	42a3      	cmp	r3, r4
 8002212:	d908      	bls.n	8002226 <_free_r+0x42>
 8002214:	6820      	ldr	r0, [r4, #0]
 8002216:	1821      	adds	r1, r4, r0
 8002218:	428b      	cmp	r3, r1
 800221a:	bf01      	itttt	eq
 800221c:	6819      	ldreq	r1, [r3, #0]
 800221e:	685b      	ldreq	r3, [r3, #4]
 8002220:	1809      	addeq	r1, r1, r0
 8002222:	6021      	streq	r1, [r4, #0]
 8002224:	e7ed      	b.n	8002202 <_free_r+0x1e>
 8002226:	461a      	mov	r2, r3
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	b10b      	cbz	r3, 8002230 <_free_r+0x4c>
 800222c:	42a3      	cmp	r3, r4
 800222e:	d9fa      	bls.n	8002226 <_free_r+0x42>
 8002230:	6811      	ldr	r1, [r2, #0]
 8002232:	1850      	adds	r0, r2, r1
 8002234:	42a0      	cmp	r0, r4
 8002236:	d10b      	bne.n	8002250 <_free_r+0x6c>
 8002238:	6820      	ldr	r0, [r4, #0]
 800223a:	4401      	add	r1, r0
 800223c:	1850      	adds	r0, r2, r1
 800223e:	4283      	cmp	r3, r0
 8002240:	6011      	str	r1, [r2, #0]
 8002242:	d1e0      	bne.n	8002206 <_free_r+0x22>
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	6053      	str	r3, [r2, #4]
 800224a:	4408      	add	r0, r1
 800224c:	6010      	str	r0, [r2, #0]
 800224e:	e7da      	b.n	8002206 <_free_r+0x22>
 8002250:	d902      	bls.n	8002258 <_free_r+0x74>
 8002252:	230c      	movs	r3, #12
 8002254:	602b      	str	r3, [r5, #0]
 8002256:	e7d6      	b.n	8002206 <_free_r+0x22>
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	1821      	adds	r1, r4, r0
 800225c:	428b      	cmp	r3, r1
 800225e:	bf04      	itt	eq
 8002260:	6819      	ldreq	r1, [r3, #0]
 8002262:	685b      	ldreq	r3, [r3, #4]
 8002264:	6063      	str	r3, [r4, #4]
 8002266:	bf04      	itt	eq
 8002268:	1809      	addeq	r1, r1, r0
 800226a:	6021      	streq	r1, [r4, #0]
 800226c:	6054      	str	r4, [r2, #4]
 800226e:	e7ca      	b.n	8002206 <_free_r+0x22>
 8002270:	bd38      	pop	{r3, r4, r5, pc}
 8002272:	bf00      	nop
 8002274:	20000288 	.word	0x20000288

08002278 <sbrk_aligned>:
 8002278:	b570      	push	{r4, r5, r6, lr}
 800227a:	4e0f      	ldr	r6, [pc, #60]	@ (80022b8 <sbrk_aligned+0x40>)
 800227c:	460c      	mov	r4, r1
 800227e:	6831      	ldr	r1, [r6, #0]
 8002280:	4605      	mov	r5, r0
 8002282:	b911      	cbnz	r1, 800228a <sbrk_aligned+0x12>
 8002284:	f000 fba6 	bl	80029d4 <_sbrk_r>
 8002288:	6030      	str	r0, [r6, #0]
 800228a:	4621      	mov	r1, r4
 800228c:	4628      	mov	r0, r5
 800228e:	f000 fba1 	bl	80029d4 <_sbrk_r>
 8002292:	1c43      	adds	r3, r0, #1
 8002294:	d103      	bne.n	800229e <sbrk_aligned+0x26>
 8002296:	f04f 34ff 	mov.w	r4, #4294967295
 800229a:	4620      	mov	r0, r4
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	1cc4      	adds	r4, r0, #3
 80022a0:	f024 0403 	bic.w	r4, r4, #3
 80022a4:	42a0      	cmp	r0, r4
 80022a6:	d0f8      	beq.n	800229a <sbrk_aligned+0x22>
 80022a8:	1a21      	subs	r1, r4, r0
 80022aa:	4628      	mov	r0, r5
 80022ac:	f000 fb92 	bl	80029d4 <_sbrk_r>
 80022b0:	3001      	adds	r0, #1
 80022b2:	d1f2      	bne.n	800229a <sbrk_aligned+0x22>
 80022b4:	e7ef      	b.n	8002296 <sbrk_aligned+0x1e>
 80022b6:	bf00      	nop
 80022b8:	20000284 	.word	0x20000284

080022bc <_malloc_r>:
 80022bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022c0:	1ccd      	adds	r5, r1, #3
 80022c2:	f025 0503 	bic.w	r5, r5, #3
 80022c6:	3508      	adds	r5, #8
 80022c8:	2d0c      	cmp	r5, #12
 80022ca:	bf38      	it	cc
 80022cc:	250c      	movcc	r5, #12
 80022ce:	2d00      	cmp	r5, #0
 80022d0:	4606      	mov	r6, r0
 80022d2:	db01      	blt.n	80022d8 <_malloc_r+0x1c>
 80022d4:	42a9      	cmp	r1, r5
 80022d6:	d904      	bls.n	80022e2 <_malloc_r+0x26>
 80022d8:	230c      	movs	r3, #12
 80022da:	6033      	str	r3, [r6, #0]
 80022dc:	2000      	movs	r0, #0
 80022de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023b8 <_malloc_r+0xfc>
 80022e6:	f000 f869 	bl	80023bc <__malloc_lock>
 80022ea:	f8d8 3000 	ldr.w	r3, [r8]
 80022ee:	461c      	mov	r4, r3
 80022f0:	bb44      	cbnz	r4, 8002344 <_malloc_r+0x88>
 80022f2:	4629      	mov	r1, r5
 80022f4:	4630      	mov	r0, r6
 80022f6:	f7ff ffbf 	bl	8002278 <sbrk_aligned>
 80022fa:	1c43      	adds	r3, r0, #1
 80022fc:	4604      	mov	r4, r0
 80022fe:	d158      	bne.n	80023b2 <_malloc_r+0xf6>
 8002300:	f8d8 4000 	ldr.w	r4, [r8]
 8002304:	4627      	mov	r7, r4
 8002306:	2f00      	cmp	r7, #0
 8002308:	d143      	bne.n	8002392 <_malloc_r+0xd6>
 800230a:	2c00      	cmp	r4, #0
 800230c:	d04b      	beq.n	80023a6 <_malloc_r+0xea>
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	4639      	mov	r1, r7
 8002312:	4630      	mov	r0, r6
 8002314:	eb04 0903 	add.w	r9, r4, r3
 8002318:	f000 fb5c 	bl	80029d4 <_sbrk_r>
 800231c:	4581      	cmp	r9, r0
 800231e:	d142      	bne.n	80023a6 <_malloc_r+0xea>
 8002320:	6821      	ldr	r1, [r4, #0]
 8002322:	1a6d      	subs	r5, r5, r1
 8002324:	4629      	mov	r1, r5
 8002326:	4630      	mov	r0, r6
 8002328:	f7ff ffa6 	bl	8002278 <sbrk_aligned>
 800232c:	3001      	adds	r0, #1
 800232e:	d03a      	beq.n	80023a6 <_malloc_r+0xea>
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	442b      	add	r3, r5
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	f8d8 3000 	ldr.w	r3, [r8]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	bb62      	cbnz	r2, 8002398 <_malloc_r+0xdc>
 800233e:	f8c8 7000 	str.w	r7, [r8]
 8002342:	e00f      	b.n	8002364 <_malloc_r+0xa8>
 8002344:	6822      	ldr	r2, [r4, #0]
 8002346:	1b52      	subs	r2, r2, r5
 8002348:	d420      	bmi.n	800238c <_malloc_r+0xd0>
 800234a:	2a0b      	cmp	r2, #11
 800234c:	d917      	bls.n	800237e <_malloc_r+0xc2>
 800234e:	1961      	adds	r1, r4, r5
 8002350:	42a3      	cmp	r3, r4
 8002352:	6025      	str	r5, [r4, #0]
 8002354:	bf18      	it	ne
 8002356:	6059      	strne	r1, [r3, #4]
 8002358:	6863      	ldr	r3, [r4, #4]
 800235a:	bf08      	it	eq
 800235c:	f8c8 1000 	streq.w	r1, [r8]
 8002360:	5162      	str	r2, [r4, r5]
 8002362:	604b      	str	r3, [r1, #4]
 8002364:	4630      	mov	r0, r6
 8002366:	f000 f82f 	bl	80023c8 <__malloc_unlock>
 800236a:	f104 000b 	add.w	r0, r4, #11
 800236e:	1d23      	adds	r3, r4, #4
 8002370:	f020 0007 	bic.w	r0, r0, #7
 8002374:	1ac2      	subs	r2, r0, r3
 8002376:	bf1c      	itt	ne
 8002378:	1a1b      	subne	r3, r3, r0
 800237a:	50a3      	strne	r3, [r4, r2]
 800237c:	e7af      	b.n	80022de <_malloc_r+0x22>
 800237e:	6862      	ldr	r2, [r4, #4]
 8002380:	42a3      	cmp	r3, r4
 8002382:	bf0c      	ite	eq
 8002384:	f8c8 2000 	streq.w	r2, [r8]
 8002388:	605a      	strne	r2, [r3, #4]
 800238a:	e7eb      	b.n	8002364 <_malloc_r+0xa8>
 800238c:	4623      	mov	r3, r4
 800238e:	6864      	ldr	r4, [r4, #4]
 8002390:	e7ae      	b.n	80022f0 <_malloc_r+0x34>
 8002392:	463c      	mov	r4, r7
 8002394:	687f      	ldr	r7, [r7, #4]
 8002396:	e7b6      	b.n	8002306 <_malloc_r+0x4a>
 8002398:	461a      	mov	r2, r3
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	42a3      	cmp	r3, r4
 800239e:	d1fb      	bne.n	8002398 <_malloc_r+0xdc>
 80023a0:	2300      	movs	r3, #0
 80023a2:	6053      	str	r3, [r2, #4]
 80023a4:	e7de      	b.n	8002364 <_malloc_r+0xa8>
 80023a6:	230c      	movs	r3, #12
 80023a8:	6033      	str	r3, [r6, #0]
 80023aa:	4630      	mov	r0, r6
 80023ac:	f000 f80c 	bl	80023c8 <__malloc_unlock>
 80023b0:	e794      	b.n	80022dc <_malloc_r+0x20>
 80023b2:	6005      	str	r5, [r0, #0]
 80023b4:	e7d6      	b.n	8002364 <_malloc_r+0xa8>
 80023b6:	bf00      	nop
 80023b8:	20000288 	.word	0x20000288

080023bc <__malloc_lock>:
 80023bc:	4801      	ldr	r0, [pc, #4]	@ (80023c4 <__malloc_lock+0x8>)
 80023be:	f7ff bf0f 	b.w	80021e0 <__retarget_lock_acquire_recursive>
 80023c2:	bf00      	nop
 80023c4:	20000280 	.word	0x20000280

080023c8 <__malloc_unlock>:
 80023c8:	4801      	ldr	r0, [pc, #4]	@ (80023d0 <__malloc_unlock+0x8>)
 80023ca:	f7ff bf0a 	b.w	80021e2 <__retarget_lock_release_recursive>
 80023ce:	bf00      	nop
 80023d0:	20000280 	.word	0x20000280

080023d4 <__ssputs_r>:
 80023d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d8:	688e      	ldr	r6, [r1, #8]
 80023da:	461f      	mov	r7, r3
 80023dc:	42be      	cmp	r6, r7
 80023de:	680b      	ldr	r3, [r1, #0]
 80023e0:	4682      	mov	sl, r0
 80023e2:	460c      	mov	r4, r1
 80023e4:	4690      	mov	r8, r2
 80023e6:	d82d      	bhi.n	8002444 <__ssputs_r+0x70>
 80023e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80023f0:	d026      	beq.n	8002440 <__ssputs_r+0x6c>
 80023f2:	6965      	ldr	r5, [r4, #20]
 80023f4:	6909      	ldr	r1, [r1, #16]
 80023f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023fa:	eba3 0901 	sub.w	r9, r3, r1
 80023fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002402:	1c7b      	adds	r3, r7, #1
 8002404:	444b      	add	r3, r9
 8002406:	106d      	asrs	r5, r5, #1
 8002408:	429d      	cmp	r5, r3
 800240a:	bf38      	it	cc
 800240c:	461d      	movcc	r5, r3
 800240e:	0553      	lsls	r3, r2, #21
 8002410:	d527      	bpl.n	8002462 <__ssputs_r+0x8e>
 8002412:	4629      	mov	r1, r5
 8002414:	f7ff ff52 	bl	80022bc <_malloc_r>
 8002418:	4606      	mov	r6, r0
 800241a:	b360      	cbz	r0, 8002476 <__ssputs_r+0xa2>
 800241c:	6921      	ldr	r1, [r4, #16]
 800241e:	464a      	mov	r2, r9
 8002420:	f000 fae8 	bl	80029f4 <memcpy>
 8002424:	89a3      	ldrh	r3, [r4, #12]
 8002426:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800242a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800242e:	81a3      	strh	r3, [r4, #12]
 8002430:	6126      	str	r6, [r4, #16]
 8002432:	6165      	str	r5, [r4, #20]
 8002434:	444e      	add	r6, r9
 8002436:	eba5 0509 	sub.w	r5, r5, r9
 800243a:	6026      	str	r6, [r4, #0]
 800243c:	60a5      	str	r5, [r4, #8]
 800243e:	463e      	mov	r6, r7
 8002440:	42be      	cmp	r6, r7
 8002442:	d900      	bls.n	8002446 <__ssputs_r+0x72>
 8002444:	463e      	mov	r6, r7
 8002446:	6820      	ldr	r0, [r4, #0]
 8002448:	4632      	mov	r2, r6
 800244a:	4641      	mov	r1, r8
 800244c:	f000 faa8 	bl	80029a0 <memmove>
 8002450:	68a3      	ldr	r3, [r4, #8]
 8002452:	1b9b      	subs	r3, r3, r6
 8002454:	60a3      	str	r3, [r4, #8]
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	4433      	add	r3, r6
 800245a:	6023      	str	r3, [r4, #0]
 800245c:	2000      	movs	r0, #0
 800245e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002462:	462a      	mov	r2, r5
 8002464:	f000 fad4 	bl	8002a10 <_realloc_r>
 8002468:	4606      	mov	r6, r0
 800246a:	2800      	cmp	r0, #0
 800246c:	d1e0      	bne.n	8002430 <__ssputs_r+0x5c>
 800246e:	6921      	ldr	r1, [r4, #16]
 8002470:	4650      	mov	r0, sl
 8002472:	f7ff feb7 	bl	80021e4 <_free_r>
 8002476:	230c      	movs	r3, #12
 8002478:	f8ca 3000 	str.w	r3, [sl]
 800247c:	89a3      	ldrh	r3, [r4, #12]
 800247e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002482:	81a3      	strh	r3, [r4, #12]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	e7e9      	b.n	800245e <__ssputs_r+0x8a>
	...

0800248c <_svfiprintf_r>:
 800248c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002490:	4698      	mov	r8, r3
 8002492:	898b      	ldrh	r3, [r1, #12]
 8002494:	061b      	lsls	r3, r3, #24
 8002496:	b09d      	sub	sp, #116	@ 0x74
 8002498:	4607      	mov	r7, r0
 800249a:	460d      	mov	r5, r1
 800249c:	4614      	mov	r4, r2
 800249e:	d510      	bpl.n	80024c2 <_svfiprintf_r+0x36>
 80024a0:	690b      	ldr	r3, [r1, #16]
 80024a2:	b973      	cbnz	r3, 80024c2 <_svfiprintf_r+0x36>
 80024a4:	2140      	movs	r1, #64	@ 0x40
 80024a6:	f7ff ff09 	bl	80022bc <_malloc_r>
 80024aa:	6028      	str	r0, [r5, #0]
 80024ac:	6128      	str	r0, [r5, #16]
 80024ae:	b930      	cbnz	r0, 80024be <_svfiprintf_r+0x32>
 80024b0:	230c      	movs	r3, #12
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	b01d      	add	sp, #116	@ 0x74
 80024ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024be:	2340      	movs	r3, #64	@ 0x40
 80024c0:	616b      	str	r3, [r5, #20]
 80024c2:	2300      	movs	r3, #0
 80024c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80024c6:	2320      	movs	r3, #32
 80024c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80024cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80024d0:	2330      	movs	r3, #48	@ 0x30
 80024d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002670 <_svfiprintf_r+0x1e4>
 80024d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80024da:	f04f 0901 	mov.w	r9, #1
 80024de:	4623      	mov	r3, r4
 80024e0:	469a      	mov	sl, r3
 80024e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024e6:	b10a      	cbz	r2, 80024ec <_svfiprintf_r+0x60>
 80024e8:	2a25      	cmp	r2, #37	@ 0x25
 80024ea:	d1f9      	bne.n	80024e0 <_svfiprintf_r+0x54>
 80024ec:	ebba 0b04 	subs.w	fp, sl, r4
 80024f0:	d00b      	beq.n	800250a <_svfiprintf_r+0x7e>
 80024f2:	465b      	mov	r3, fp
 80024f4:	4622      	mov	r2, r4
 80024f6:	4629      	mov	r1, r5
 80024f8:	4638      	mov	r0, r7
 80024fa:	f7ff ff6b 	bl	80023d4 <__ssputs_r>
 80024fe:	3001      	adds	r0, #1
 8002500:	f000 80a7 	beq.w	8002652 <_svfiprintf_r+0x1c6>
 8002504:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002506:	445a      	add	r2, fp
 8002508:	9209      	str	r2, [sp, #36]	@ 0x24
 800250a:	f89a 3000 	ldrb.w	r3, [sl]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 809f 	beq.w	8002652 <_svfiprintf_r+0x1c6>
 8002514:	2300      	movs	r3, #0
 8002516:	f04f 32ff 	mov.w	r2, #4294967295
 800251a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800251e:	f10a 0a01 	add.w	sl, sl, #1
 8002522:	9304      	str	r3, [sp, #16]
 8002524:	9307      	str	r3, [sp, #28]
 8002526:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800252a:	931a      	str	r3, [sp, #104]	@ 0x68
 800252c:	4654      	mov	r4, sl
 800252e:	2205      	movs	r2, #5
 8002530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002534:	484e      	ldr	r0, [pc, #312]	@ (8002670 <_svfiprintf_r+0x1e4>)
 8002536:	f7fd fe5b 	bl	80001f0 <memchr>
 800253a:	9a04      	ldr	r2, [sp, #16]
 800253c:	b9d8      	cbnz	r0, 8002576 <_svfiprintf_r+0xea>
 800253e:	06d0      	lsls	r0, r2, #27
 8002540:	bf44      	itt	mi
 8002542:	2320      	movmi	r3, #32
 8002544:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002548:	0711      	lsls	r1, r2, #28
 800254a:	bf44      	itt	mi
 800254c:	232b      	movmi	r3, #43	@ 0x2b
 800254e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002552:	f89a 3000 	ldrb.w	r3, [sl]
 8002556:	2b2a      	cmp	r3, #42	@ 0x2a
 8002558:	d015      	beq.n	8002586 <_svfiprintf_r+0xfa>
 800255a:	9a07      	ldr	r2, [sp, #28]
 800255c:	4654      	mov	r4, sl
 800255e:	2000      	movs	r0, #0
 8002560:	f04f 0c0a 	mov.w	ip, #10
 8002564:	4621      	mov	r1, r4
 8002566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800256a:	3b30      	subs	r3, #48	@ 0x30
 800256c:	2b09      	cmp	r3, #9
 800256e:	d94b      	bls.n	8002608 <_svfiprintf_r+0x17c>
 8002570:	b1b0      	cbz	r0, 80025a0 <_svfiprintf_r+0x114>
 8002572:	9207      	str	r2, [sp, #28]
 8002574:	e014      	b.n	80025a0 <_svfiprintf_r+0x114>
 8002576:	eba0 0308 	sub.w	r3, r0, r8
 800257a:	fa09 f303 	lsl.w	r3, r9, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	9304      	str	r3, [sp, #16]
 8002582:	46a2      	mov	sl, r4
 8002584:	e7d2      	b.n	800252c <_svfiprintf_r+0xa0>
 8002586:	9b03      	ldr	r3, [sp, #12]
 8002588:	1d19      	adds	r1, r3, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	9103      	str	r1, [sp, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	bfbb      	ittet	lt
 8002592:	425b      	neglt	r3, r3
 8002594:	f042 0202 	orrlt.w	r2, r2, #2
 8002598:	9307      	strge	r3, [sp, #28]
 800259a:	9307      	strlt	r3, [sp, #28]
 800259c:	bfb8      	it	lt
 800259e:	9204      	strlt	r2, [sp, #16]
 80025a0:	7823      	ldrb	r3, [r4, #0]
 80025a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80025a4:	d10a      	bne.n	80025bc <_svfiprintf_r+0x130>
 80025a6:	7863      	ldrb	r3, [r4, #1]
 80025a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80025aa:	d132      	bne.n	8002612 <_svfiprintf_r+0x186>
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	1d1a      	adds	r2, r3, #4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	9203      	str	r2, [sp, #12]
 80025b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80025b8:	3402      	adds	r4, #2
 80025ba:	9305      	str	r3, [sp, #20]
 80025bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002680 <_svfiprintf_r+0x1f4>
 80025c0:	7821      	ldrb	r1, [r4, #0]
 80025c2:	2203      	movs	r2, #3
 80025c4:	4650      	mov	r0, sl
 80025c6:	f7fd fe13 	bl	80001f0 <memchr>
 80025ca:	b138      	cbz	r0, 80025dc <_svfiprintf_r+0x150>
 80025cc:	9b04      	ldr	r3, [sp, #16]
 80025ce:	eba0 000a 	sub.w	r0, r0, sl
 80025d2:	2240      	movs	r2, #64	@ 0x40
 80025d4:	4082      	lsls	r2, r0
 80025d6:	4313      	orrs	r3, r2
 80025d8:	3401      	adds	r4, #1
 80025da:	9304      	str	r3, [sp, #16]
 80025dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025e0:	4824      	ldr	r0, [pc, #144]	@ (8002674 <_svfiprintf_r+0x1e8>)
 80025e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80025e6:	2206      	movs	r2, #6
 80025e8:	f7fd fe02 	bl	80001f0 <memchr>
 80025ec:	2800      	cmp	r0, #0
 80025ee:	d036      	beq.n	800265e <_svfiprintf_r+0x1d2>
 80025f0:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <_svfiprintf_r+0x1ec>)
 80025f2:	bb1b      	cbnz	r3, 800263c <_svfiprintf_r+0x1b0>
 80025f4:	9b03      	ldr	r3, [sp, #12]
 80025f6:	3307      	adds	r3, #7
 80025f8:	f023 0307 	bic.w	r3, r3, #7
 80025fc:	3308      	adds	r3, #8
 80025fe:	9303      	str	r3, [sp, #12]
 8002600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002602:	4433      	add	r3, r6
 8002604:	9309      	str	r3, [sp, #36]	@ 0x24
 8002606:	e76a      	b.n	80024de <_svfiprintf_r+0x52>
 8002608:	fb0c 3202 	mla	r2, ip, r2, r3
 800260c:	460c      	mov	r4, r1
 800260e:	2001      	movs	r0, #1
 8002610:	e7a8      	b.n	8002564 <_svfiprintf_r+0xd8>
 8002612:	2300      	movs	r3, #0
 8002614:	3401      	adds	r4, #1
 8002616:	9305      	str	r3, [sp, #20]
 8002618:	4619      	mov	r1, r3
 800261a:	f04f 0c0a 	mov.w	ip, #10
 800261e:	4620      	mov	r0, r4
 8002620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002624:	3a30      	subs	r2, #48	@ 0x30
 8002626:	2a09      	cmp	r2, #9
 8002628:	d903      	bls.n	8002632 <_svfiprintf_r+0x1a6>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0c6      	beq.n	80025bc <_svfiprintf_r+0x130>
 800262e:	9105      	str	r1, [sp, #20]
 8002630:	e7c4      	b.n	80025bc <_svfiprintf_r+0x130>
 8002632:	fb0c 2101 	mla	r1, ip, r1, r2
 8002636:	4604      	mov	r4, r0
 8002638:	2301      	movs	r3, #1
 800263a:	e7f0      	b.n	800261e <_svfiprintf_r+0x192>
 800263c:	ab03      	add	r3, sp, #12
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	462a      	mov	r2, r5
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <_svfiprintf_r+0x1f0>)
 8002644:	a904      	add	r1, sp, #16
 8002646:	4638      	mov	r0, r7
 8002648:	f3af 8000 	nop.w
 800264c:	1c42      	adds	r2, r0, #1
 800264e:	4606      	mov	r6, r0
 8002650:	d1d6      	bne.n	8002600 <_svfiprintf_r+0x174>
 8002652:	89ab      	ldrh	r3, [r5, #12]
 8002654:	065b      	lsls	r3, r3, #25
 8002656:	f53f af2d 	bmi.w	80024b4 <_svfiprintf_r+0x28>
 800265a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800265c:	e72c      	b.n	80024b8 <_svfiprintf_r+0x2c>
 800265e:	ab03      	add	r3, sp, #12
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	462a      	mov	r2, r5
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <_svfiprintf_r+0x1f0>)
 8002666:	a904      	add	r1, sp, #16
 8002668:	4638      	mov	r0, r7
 800266a:	f000 f879 	bl	8002760 <_printf_i>
 800266e:	e7ed      	b.n	800264c <_svfiprintf_r+0x1c0>
 8002670:	08002ab4 	.word	0x08002ab4
 8002674:	08002abe 	.word	0x08002abe
 8002678:	00000000 	.word	0x00000000
 800267c:	080023d5 	.word	0x080023d5
 8002680:	08002aba 	.word	0x08002aba

08002684 <_printf_common>:
 8002684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002688:	4616      	mov	r6, r2
 800268a:	4698      	mov	r8, r3
 800268c:	688a      	ldr	r2, [r1, #8]
 800268e:	690b      	ldr	r3, [r1, #16]
 8002690:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002694:	4293      	cmp	r3, r2
 8002696:	bfb8      	it	lt
 8002698:	4613      	movlt	r3, r2
 800269a:	6033      	str	r3, [r6, #0]
 800269c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80026a0:	4607      	mov	r7, r0
 80026a2:	460c      	mov	r4, r1
 80026a4:	b10a      	cbz	r2, 80026aa <_printf_common+0x26>
 80026a6:	3301      	adds	r3, #1
 80026a8:	6033      	str	r3, [r6, #0]
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	0699      	lsls	r1, r3, #26
 80026ae:	bf42      	ittt	mi
 80026b0:	6833      	ldrmi	r3, [r6, #0]
 80026b2:	3302      	addmi	r3, #2
 80026b4:	6033      	strmi	r3, [r6, #0]
 80026b6:	6825      	ldr	r5, [r4, #0]
 80026b8:	f015 0506 	ands.w	r5, r5, #6
 80026bc:	d106      	bne.n	80026cc <_printf_common+0x48>
 80026be:	f104 0a19 	add.w	sl, r4, #25
 80026c2:	68e3      	ldr	r3, [r4, #12]
 80026c4:	6832      	ldr	r2, [r6, #0]
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	42ab      	cmp	r3, r5
 80026ca:	dc26      	bgt.n	800271a <_printf_common+0x96>
 80026cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80026d0:	6822      	ldr	r2, [r4, #0]
 80026d2:	3b00      	subs	r3, #0
 80026d4:	bf18      	it	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	0692      	lsls	r2, r2, #26
 80026da:	d42b      	bmi.n	8002734 <_printf_common+0xb0>
 80026dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80026e0:	4641      	mov	r1, r8
 80026e2:	4638      	mov	r0, r7
 80026e4:	47c8      	blx	r9
 80026e6:	3001      	adds	r0, #1
 80026e8:	d01e      	beq.n	8002728 <_printf_common+0xa4>
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	6922      	ldr	r2, [r4, #16]
 80026ee:	f003 0306 	and.w	r3, r3, #6
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf02      	ittt	eq
 80026f6:	68e5      	ldreq	r5, [r4, #12]
 80026f8:	6833      	ldreq	r3, [r6, #0]
 80026fa:	1aed      	subeq	r5, r5, r3
 80026fc:	68a3      	ldr	r3, [r4, #8]
 80026fe:	bf0c      	ite	eq
 8002700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002704:	2500      	movne	r5, #0
 8002706:	4293      	cmp	r3, r2
 8002708:	bfc4      	itt	gt
 800270a:	1a9b      	subgt	r3, r3, r2
 800270c:	18ed      	addgt	r5, r5, r3
 800270e:	2600      	movs	r6, #0
 8002710:	341a      	adds	r4, #26
 8002712:	42b5      	cmp	r5, r6
 8002714:	d11a      	bne.n	800274c <_printf_common+0xc8>
 8002716:	2000      	movs	r0, #0
 8002718:	e008      	b.n	800272c <_printf_common+0xa8>
 800271a:	2301      	movs	r3, #1
 800271c:	4652      	mov	r2, sl
 800271e:	4641      	mov	r1, r8
 8002720:	4638      	mov	r0, r7
 8002722:	47c8      	blx	r9
 8002724:	3001      	adds	r0, #1
 8002726:	d103      	bne.n	8002730 <_printf_common+0xac>
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002730:	3501      	adds	r5, #1
 8002732:	e7c6      	b.n	80026c2 <_printf_common+0x3e>
 8002734:	18e1      	adds	r1, r4, r3
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	2030      	movs	r0, #48	@ 0x30
 800273a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800273e:	4422      	add	r2, r4
 8002740:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002744:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002748:	3302      	adds	r3, #2
 800274a:	e7c7      	b.n	80026dc <_printf_common+0x58>
 800274c:	2301      	movs	r3, #1
 800274e:	4622      	mov	r2, r4
 8002750:	4641      	mov	r1, r8
 8002752:	4638      	mov	r0, r7
 8002754:	47c8      	blx	r9
 8002756:	3001      	adds	r0, #1
 8002758:	d0e6      	beq.n	8002728 <_printf_common+0xa4>
 800275a:	3601      	adds	r6, #1
 800275c:	e7d9      	b.n	8002712 <_printf_common+0x8e>
	...

08002760 <_printf_i>:
 8002760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002764:	7e0f      	ldrb	r7, [r1, #24]
 8002766:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002768:	2f78      	cmp	r7, #120	@ 0x78
 800276a:	4691      	mov	r9, r2
 800276c:	4680      	mov	r8, r0
 800276e:	460c      	mov	r4, r1
 8002770:	469a      	mov	sl, r3
 8002772:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002776:	d807      	bhi.n	8002788 <_printf_i+0x28>
 8002778:	2f62      	cmp	r7, #98	@ 0x62
 800277a:	d80a      	bhi.n	8002792 <_printf_i+0x32>
 800277c:	2f00      	cmp	r7, #0
 800277e:	f000 80d2 	beq.w	8002926 <_printf_i+0x1c6>
 8002782:	2f58      	cmp	r7, #88	@ 0x58
 8002784:	f000 80b9 	beq.w	80028fa <_printf_i+0x19a>
 8002788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800278c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002790:	e03a      	b.n	8002808 <_printf_i+0xa8>
 8002792:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002796:	2b15      	cmp	r3, #21
 8002798:	d8f6      	bhi.n	8002788 <_printf_i+0x28>
 800279a:	a101      	add	r1, pc, #4	@ (adr r1, 80027a0 <_printf_i+0x40>)
 800279c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027a0:	080027f9 	.word	0x080027f9
 80027a4:	0800280d 	.word	0x0800280d
 80027a8:	08002789 	.word	0x08002789
 80027ac:	08002789 	.word	0x08002789
 80027b0:	08002789 	.word	0x08002789
 80027b4:	08002789 	.word	0x08002789
 80027b8:	0800280d 	.word	0x0800280d
 80027bc:	08002789 	.word	0x08002789
 80027c0:	08002789 	.word	0x08002789
 80027c4:	08002789 	.word	0x08002789
 80027c8:	08002789 	.word	0x08002789
 80027cc:	0800290d 	.word	0x0800290d
 80027d0:	08002837 	.word	0x08002837
 80027d4:	080028c7 	.word	0x080028c7
 80027d8:	08002789 	.word	0x08002789
 80027dc:	08002789 	.word	0x08002789
 80027e0:	0800292f 	.word	0x0800292f
 80027e4:	08002789 	.word	0x08002789
 80027e8:	08002837 	.word	0x08002837
 80027ec:	08002789 	.word	0x08002789
 80027f0:	08002789 	.word	0x08002789
 80027f4:	080028cf 	.word	0x080028cf
 80027f8:	6833      	ldr	r3, [r6, #0]
 80027fa:	1d1a      	adds	r2, r3, #4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6032      	str	r2, [r6, #0]
 8002800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002804:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002808:	2301      	movs	r3, #1
 800280a:	e09d      	b.n	8002948 <_printf_i+0x1e8>
 800280c:	6833      	ldr	r3, [r6, #0]
 800280e:	6820      	ldr	r0, [r4, #0]
 8002810:	1d19      	adds	r1, r3, #4
 8002812:	6031      	str	r1, [r6, #0]
 8002814:	0606      	lsls	r6, r0, #24
 8002816:	d501      	bpl.n	800281c <_printf_i+0xbc>
 8002818:	681d      	ldr	r5, [r3, #0]
 800281a:	e003      	b.n	8002824 <_printf_i+0xc4>
 800281c:	0645      	lsls	r5, r0, #25
 800281e:	d5fb      	bpl.n	8002818 <_printf_i+0xb8>
 8002820:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002824:	2d00      	cmp	r5, #0
 8002826:	da03      	bge.n	8002830 <_printf_i+0xd0>
 8002828:	232d      	movs	r3, #45	@ 0x2d
 800282a:	426d      	negs	r5, r5
 800282c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002830:	4859      	ldr	r0, [pc, #356]	@ (8002998 <_printf_i+0x238>)
 8002832:	230a      	movs	r3, #10
 8002834:	e011      	b.n	800285a <_printf_i+0xfa>
 8002836:	6821      	ldr	r1, [r4, #0]
 8002838:	6833      	ldr	r3, [r6, #0]
 800283a:	0608      	lsls	r0, r1, #24
 800283c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002840:	d402      	bmi.n	8002848 <_printf_i+0xe8>
 8002842:	0649      	lsls	r1, r1, #25
 8002844:	bf48      	it	mi
 8002846:	b2ad      	uxthmi	r5, r5
 8002848:	2f6f      	cmp	r7, #111	@ 0x6f
 800284a:	4853      	ldr	r0, [pc, #332]	@ (8002998 <_printf_i+0x238>)
 800284c:	6033      	str	r3, [r6, #0]
 800284e:	bf14      	ite	ne
 8002850:	230a      	movne	r3, #10
 8002852:	2308      	moveq	r3, #8
 8002854:	2100      	movs	r1, #0
 8002856:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800285a:	6866      	ldr	r6, [r4, #4]
 800285c:	60a6      	str	r6, [r4, #8]
 800285e:	2e00      	cmp	r6, #0
 8002860:	bfa2      	ittt	ge
 8002862:	6821      	ldrge	r1, [r4, #0]
 8002864:	f021 0104 	bicge.w	r1, r1, #4
 8002868:	6021      	strge	r1, [r4, #0]
 800286a:	b90d      	cbnz	r5, 8002870 <_printf_i+0x110>
 800286c:	2e00      	cmp	r6, #0
 800286e:	d04b      	beq.n	8002908 <_printf_i+0x1a8>
 8002870:	4616      	mov	r6, r2
 8002872:	fbb5 f1f3 	udiv	r1, r5, r3
 8002876:	fb03 5711 	mls	r7, r3, r1, r5
 800287a:	5dc7      	ldrb	r7, [r0, r7]
 800287c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002880:	462f      	mov	r7, r5
 8002882:	42bb      	cmp	r3, r7
 8002884:	460d      	mov	r5, r1
 8002886:	d9f4      	bls.n	8002872 <_printf_i+0x112>
 8002888:	2b08      	cmp	r3, #8
 800288a:	d10b      	bne.n	80028a4 <_printf_i+0x144>
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	07df      	lsls	r7, r3, #31
 8002890:	d508      	bpl.n	80028a4 <_printf_i+0x144>
 8002892:	6923      	ldr	r3, [r4, #16]
 8002894:	6861      	ldr	r1, [r4, #4]
 8002896:	4299      	cmp	r1, r3
 8002898:	bfde      	ittt	le
 800289a:	2330      	movle	r3, #48	@ 0x30
 800289c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80028a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80028a4:	1b92      	subs	r2, r2, r6
 80028a6:	6122      	str	r2, [r4, #16]
 80028a8:	f8cd a000 	str.w	sl, [sp]
 80028ac:	464b      	mov	r3, r9
 80028ae:	aa03      	add	r2, sp, #12
 80028b0:	4621      	mov	r1, r4
 80028b2:	4640      	mov	r0, r8
 80028b4:	f7ff fee6 	bl	8002684 <_printf_common>
 80028b8:	3001      	adds	r0, #1
 80028ba:	d14a      	bne.n	8002952 <_printf_i+0x1f2>
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	b004      	add	sp, #16
 80028c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	f043 0320 	orr.w	r3, r3, #32
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	4833      	ldr	r0, [pc, #204]	@ (800299c <_printf_i+0x23c>)
 80028d0:	2778      	movs	r7, #120	@ 0x78
 80028d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	6831      	ldr	r1, [r6, #0]
 80028da:	061f      	lsls	r7, r3, #24
 80028dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80028e0:	d402      	bmi.n	80028e8 <_printf_i+0x188>
 80028e2:	065f      	lsls	r7, r3, #25
 80028e4:	bf48      	it	mi
 80028e6:	b2ad      	uxthmi	r5, r5
 80028e8:	6031      	str	r1, [r6, #0]
 80028ea:	07d9      	lsls	r1, r3, #31
 80028ec:	bf44      	itt	mi
 80028ee:	f043 0320 	orrmi.w	r3, r3, #32
 80028f2:	6023      	strmi	r3, [r4, #0]
 80028f4:	b11d      	cbz	r5, 80028fe <_printf_i+0x19e>
 80028f6:	2310      	movs	r3, #16
 80028f8:	e7ac      	b.n	8002854 <_printf_i+0xf4>
 80028fa:	4827      	ldr	r0, [pc, #156]	@ (8002998 <_printf_i+0x238>)
 80028fc:	e7e9      	b.n	80028d2 <_printf_i+0x172>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	f023 0320 	bic.w	r3, r3, #32
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	e7f6      	b.n	80028f6 <_printf_i+0x196>
 8002908:	4616      	mov	r6, r2
 800290a:	e7bd      	b.n	8002888 <_printf_i+0x128>
 800290c:	6833      	ldr	r3, [r6, #0]
 800290e:	6825      	ldr	r5, [r4, #0]
 8002910:	6961      	ldr	r1, [r4, #20]
 8002912:	1d18      	adds	r0, r3, #4
 8002914:	6030      	str	r0, [r6, #0]
 8002916:	062e      	lsls	r6, r5, #24
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	d501      	bpl.n	8002920 <_printf_i+0x1c0>
 800291c:	6019      	str	r1, [r3, #0]
 800291e:	e002      	b.n	8002926 <_printf_i+0x1c6>
 8002920:	0668      	lsls	r0, r5, #25
 8002922:	d5fb      	bpl.n	800291c <_printf_i+0x1bc>
 8002924:	8019      	strh	r1, [r3, #0]
 8002926:	2300      	movs	r3, #0
 8002928:	6123      	str	r3, [r4, #16]
 800292a:	4616      	mov	r6, r2
 800292c:	e7bc      	b.n	80028a8 <_printf_i+0x148>
 800292e:	6833      	ldr	r3, [r6, #0]
 8002930:	1d1a      	adds	r2, r3, #4
 8002932:	6032      	str	r2, [r6, #0]
 8002934:	681e      	ldr	r6, [r3, #0]
 8002936:	6862      	ldr	r2, [r4, #4]
 8002938:	2100      	movs	r1, #0
 800293a:	4630      	mov	r0, r6
 800293c:	f7fd fc58 	bl	80001f0 <memchr>
 8002940:	b108      	cbz	r0, 8002946 <_printf_i+0x1e6>
 8002942:	1b80      	subs	r0, r0, r6
 8002944:	6060      	str	r0, [r4, #4]
 8002946:	6863      	ldr	r3, [r4, #4]
 8002948:	6123      	str	r3, [r4, #16]
 800294a:	2300      	movs	r3, #0
 800294c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002950:	e7aa      	b.n	80028a8 <_printf_i+0x148>
 8002952:	6923      	ldr	r3, [r4, #16]
 8002954:	4632      	mov	r2, r6
 8002956:	4649      	mov	r1, r9
 8002958:	4640      	mov	r0, r8
 800295a:	47d0      	blx	sl
 800295c:	3001      	adds	r0, #1
 800295e:	d0ad      	beq.n	80028bc <_printf_i+0x15c>
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	079b      	lsls	r3, r3, #30
 8002964:	d413      	bmi.n	800298e <_printf_i+0x22e>
 8002966:	68e0      	ldr	r0, [r4, #12]
 8002968:	9b03      	ldr	r3, [sp, #12]
 800296a:	4298      	cmp	r0, r3
 800296c:	bfb8      	it	lt
 800296e:	4618      	movlt	r0, r3
 8002970:	e7a6      	b.n	80028c0 <_printf_i+0x160>
 8002972:	2301      	movs	r3, #1
 8002974:	4632      	mov	r2, r6
 8002976:	4649      	mov	r1, r9
 8002978:	4640      	mov	r0, r8
 800297a:	47d0      	blx	sl
 800297c:	3001      	adds	r0, #1
 800297e:	d09d      	beq.n	80028bc <_printf_i+0x15c>
 8002980:	3501      	adds	r5, #1
 8002982:	68e3      	ldr	r3, [r4, #12]
 8002984:	9903      	ldr	r1, [sp, #12]
 8002986:	1a5b      	subs	r3, r3, r1
 8002988:	42ab      	cmp	r3, r5
 800298a:	dcf2      	bgt.n	8002972 <_printf_i+0x212>
 800298c:	e7eb      	b.n	8002966 <_printf_i+0x206>
 800298e:	2500      	movs	r5, #0
 8002990:	f104 0619 	add.w	r6, r4, #25
 8002994:	e7f5      	b.n	8002982 <_printf_i+0x222>
 8002996:	bf00      	nop
 8002998:	08002ac5 	.word	0x08002ac5
 800299c:	08002ad6 	.word	0x08002ad6

080029a0 <memmove>:
 80029a0:	4288      	cmp	r0, r1
 80029a2:	b510      	push	{r4, lr}
 80029a4:	eb01 0402 	add.w	r4, r1, r2
 80029a8:	d902      	bls.n	80029b0 <memmove+0x10>
 80029aa:	4284      	cmp	r4, r0
 80029ac:	4623      	mov	r3, r4
 80029ae:	d807      	bhi.n	80029c0 <memmove+0x20>
 80029b0:	1e43      	subs	r3, r0, #1
 80029b2:	42a1      	cmp	r1, r4
 80029b4:	d008      	beq.n	80029c8 <memmove+0x28>
 80029b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029be:	e7f8      	b.n	80029b2 <memmove+0x12>
 80029c0:	4402      	add	r2, r0
 80029c2:	4601      	mov	r1, r0
 80029c4:	428a      	cmp	r2, r1
 80029c6:	d100      	bne.n	80029ca <memmove+0x2a>
 80029c8:	bd10      	pop	{r4, pc}
 80029ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029d2:	e7f7      	b.n	80029c4 <memmove+0x24>

080029d4 <_sbrk_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4d06      	ldr	r5, [pc, #24]	@ (80029f0 <_sbrk_r+0x1c>)
 80029d8:	2300      	movs	r3, #0
 80029da:	4604      	mov	r4, r0
 80029dc:	4608      	mov	r0, r1
 80029de:	602b      	str	r3, [r5, #0]
 80029e0:	f7fe f81a 	bl	8000a18 <_sbrk>
 80029e4:	1c43      	adds	r3, r0, #1
 80029e6:	d102      	bne.n	80029ee <_sbrk_r+0x1a>
 80029e8:	682b      	ldr	r3, [r5, #0]
 80029ea:	b103      	cbz	r3, 80029ee <_sbrk_r+0x1a>
 80029ec:	6023      	str	r3, [r4, #0]
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
 80029f0:	2000027c 	.word	0x2000027c

080029f4 <memcpy>:
 80029f4:	440a      	add	r2, r1
 80029f6:	4291      	cmp	r1, r2
 80029f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80029fc:	d100      	bne.n	8002a00 <memcpy+0xc>
 80029fe:	4770      	bx	lr
 8002a00:	b510      	push	{r4, lr}
 8002a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a0a:	4291      	cmp	r1, r2
 8002a0c:	d1f9      	bne.n	8002a02 <memcpy+0xe>
 8002a0e:	bd10      	pop	{r4, pc}

08002a10 <_realloc_r>:
 8002a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a14:	4680      	mov	r8, r0
 8002a16:	4615      	mov	r5, r2
 8002a18:	460c      	mov	r4, r1
 8002a1a:	b921      	cbnz	r1, 8002a26 <_realloc_r+0x16>
 8002a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a20:	4611      	mov	r1, r2
 8002a22:	f7ff bc4b 	b.w	80022bc <_malloc_r>
 8002a26:	b92a      	cbnz	r2, 8002a34 <_realloc_r+0x24>
 8002a28:	f7ff fbdc 	bl	80021e4 <_free_r>
 8002a2c:	2400      	movs	r4, #0
 8002a2e:	4620      	mov	r0, r4
 8002a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a34:	f000 f81a 	bl	8002a6c <_malloc_usable_size_r>
 8002a38:	4285      	cmp	r5, r0
 8002a3a:	4606      	mov	r6, r0
 8002a3c:	d802      	bhi.n	8002a44 <_realloc_r+0x34>
 8002a3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002a42:	d8f4      	bhi.n	8002a2e <_realloc_r+0x1e>
 8002a44:	4629      	mov	r1, r5
 8002a46:	4640      	mov	r0, r8
 8002a48:	f7ff fc38 	bl	80022bc <_malloc_r>
 8002a4c:	4607      	mov	r7, r0
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d0ec      	beq.n	8002a2c <_realloc_r+0x1c>
 8002a52:	42b5      	cmp	r5, r6
 8002a54:	462a      	mov	r2, r5
 8002a56:	4621      	mov	r1, r4
 8002a58:	bf28      	it	cs
 8002a5a:	4632      	movcs	r2, r6
 8002a5c:	f7ff ffca 	bl	80029f4 <memcpy>
 8002a60:	4621      	mov	r1, r4
 8002a62:	4640      	mov	r0, r8
 8002a64:	f7ff fbbe 	bl	80021e4 <_free_r>
 8002a68:	463c      	mov	r4, r7
 8002a6a:	e7e0      	b.n	8002a2e <_realloc_r+0x1e>

08002a6c <_malloc_usable_size_r>:
 8002a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a70:	1f18      	subs	r0, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bfbc      	itt	lt
 8002a76:	580b      	ldrlt	r3, [r1, r0]
 8002a78:	18c0      	addlt	r0, r0, r3
 8002a7a:	4770      	bx	lr

08002a7c <_init>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	bf00      	nop
 8002a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a82:	bc08      	pop	{r3}
 8002a84:	469e      	mov	lr, r3
 8002a86:	4770      	bx	lr

08002a88 <_fini>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr
